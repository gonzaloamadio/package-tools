export SOURCE_DIR ?= UNKNOWN # Defined in Makefile in the root dir
export TESTS_DIR ?= UNKNOWN # Defined in makefile
export FORMAT_THIS_FOLDERS_WITH_BLACK_FORMATTER ?= UNKNOWN

export FLAKE8_TARGET ?= $(SOURCE_DIR) tests/
export FLAKE8_THRESHOLD ?= 380
export COVERAGE_THRESHOLD ?= 83
export TEST_REPORT_FILE_NAME ?= tests.xml
export COVERAGE_PRINT_CONSOLE_REPORT ?= 1
export COVERAGE_OPEN_REPORT_BROWSER ?= 1
export UNITTEST_COVERAGE_PARAMETERS ?= --skip-covered --skip-empty

export MAKE_BASE_DIR ?= $(CURDIR)/make_base
export MAKE_BASE_HOOKS_DIR ?= $(MAKE_BASE_DIR)/hooks
export HOOK_STEP_COMMAND ?= python $(MAKE_BASE_HOOKS_DIR)/add_step_to_hook.py

export SECURITY_CHECKS_VENV_PY3 ?= make_base/security-checks-venv-py3

export PATH := $(PATH):$(MAKE_BASE_DIR)

# export VENV ?= ~/.virtualenvs/test-virtualenv
# Create venv in projects folder, better to work with containers
export VENV ?= test-virtualenv
export VENV_ACTIVATE ?= $(VENV)/bin/activate
export VENV_GENERATOR ?= python3 -m venv
export USE_DEV_REQUIREMENTS ?= 0

export GREEN='\033[0;32m'
export RED='\033[0;31m'
export YELLOW='\033[1;33m'
export NC='\033[0m' # No Color

# --------------------------------------------------------- #
#                     HELP COMMANDS
# --------------------------------------------------------- #


help: ## Print this message and exit
	@python $(MAKE_BASE_DIR)/makefile_help.py $(MAKEFILE_LIST)

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))
list-paths:
	@echo $(mkfile_path)  # /pth/to/repo/make_base/Makefile.base
	@echo $(current_dir)  # make_base
	@echo $(shell pwd)    # /path/to/repo
	@echo $(MAKE_BASE_DIR) # /path/to/repo/make_base
	@echo $(MAKEFILE_LIST) # Makefile make_base/Makefile.base
	@echo $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST)))) /path/to/repo

# --------------------------------------------------------- #
#                       MANAGING 
# --------------------------------------------------------- #

# Create a new virtualenv in case we do not have one (useful for docker)

install-venv: create-venv ## Creates the virtualenv that will be used for tests and install reqs
	. $(VENV_ACTIVATE) && $(MAKE) init-venv;
	@echo
	@echo "${GREEN}Activate this venv executing the following command${NC}"
	@echo ". $(VENV)/bin/activate"
	@echo

create-venv: ## Create venv if it doesn't exist
	test -d $(VENV) || $(VENV_GENERATOR) $(VENV)

init-venv:  ## Install packages in current venv
	test_venv_init.sh

clean-venv: ## Delete virtualenv created: VENV variable
	rm -rf $(VENV)

default-test-deps: install-venv clean-test ## Dependencies for target repo-test

clean-test: ## Remove test and coverage artifacts
	rm -f $(TEST_REPORT_FILE_NAME) || true
	rm -f flake8_issues.txt || true
	rm -rf .coverage htmlcov coverage.xml || true
	rm -rf coverage_html_report || true

clean-python-build: ## Remove python build artifacts
	rm -fr build/ || true
	rm -fr dist/ || true
	rm -fr .eggs/ || true
	rm -fr *.egg-info/ || true

clean-pyc: ## Remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	find . -name '__pycache__' -exec rm -fr {} +

clean: clean-python-build clean-pyc clean-test clean-venv ## Remove all build, test, coverage and Python artifacts

# --------------------------------------------------------- #
#                        COMMANDS                 
# --------------------------------------------------------- #

# Difference of commands with -ci at the end, is that we create venvs always.
# Useful for example to run in CI or docker containers.


test-ci: default-test-deps ## Run tests coverage and flake8 (creating venv)
	@. $(VENV_ACTIVATE) && $(MAKE_BASE_DIR)/repo_test.sh

test: ## Run tests coverage and flake8
	printf "Executing script make_base/repo_test.sh\n"
	@$(MAKE_BASE_DIR)/repo_test.sh

check-security: 
	$(MAKE_BASE_DIR)/run_bandit_checks.sh
	$(MAKE_BASE_DIR)/run_safety_checks.sh

flake8: ## Run flake8 in current env
	@rm -rf flake8_issues.txt
	@$(MAKE_BASE_DIR)/run_flake8.sh

black-diff: ## Show black changes without applying them
	@black -S --diff $(FORMAT_THIS_FOLDERS_WITH_BLACK_FORMATTER)

black-check: ## Show black changes without applying them
	@black -S --check $(FORMAT_THIS_FOLDERS_WITH_BLACK_FORMATTER)

black: ## Show black changes without applying them
	@black -S $(FORMAT_THIS_FOLDERS_WITH_BLACK_FORMATTER)

# coverage: default-test-deps ## Run coverage in current env, show results in browser
coverage: 
	rm -rf .coverage htmlcov coverage.xml
	. $(VENV_ACTIVATE) && $(MAKE_BASE_DIR)/run_coverage_unittest.sh

coverage-django: ## Run coverage with django test suite
	rm -rf .coverage htmlcov coverage.xml
	@$(MAKE_BASE_DIR)/run_coverage_django.sh

coverage-report:
	@coverage report --skip-covered --skip-empty || true # we want html report anyway
	@coverage html
	@open


# --------------------------------------------------------- #
#                       HOOKS 
# --------------------------------------------------------- #

add_hook_step: ## Add extra command to hook
	@echo 'Usage: make add_hook_step HOOK=<hook_name> HOOK_COMMAND=<path_to_custom_script>'
	$(HOOK_STEP_COMMAND) $(HOOK) $(HOOK_COMMAND)

reset_hooks: ## Delete all hooks
	rm -rfv .git/hooks/*

install_hooks: reset_hooks install_issue_id_commit_hook ## Install a predefined set of hooks
	$(HOOK_STEP_COMMAND) pre-push make_base/hooks/run_flake8_hook.sh

install_issue_id_commit_hook: ## Install just isuue-id hook
	$(HOOK_STEP_COMMAND) commit-msg make_base/hooks/add_issue_in_message_commit_msg_hook.py


.PHONY: create-venv venv
.PHONY: flake8 coverage docs
.PHONY: clean-test clean-pyc clean-python-build clean-debian clean-test-venv clean
.PHONY: help add_hook_step reset_hooks install_issue_id_commit_hook install_hooks
